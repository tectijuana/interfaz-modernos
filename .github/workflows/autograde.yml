name: Autograding ARM64

on:
  push:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  grade:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar toolchain ARM64 + QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-user \
            binutils-aarch64-linux-gnu \
            gcc-aarch64-linux-gnu \
            make

      - name: Compilar
        run: make build

      - name: Ejecutar pruebas
        id: tests
        run: |
          bash tests/run_tests.sh > tests/results.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Subir artefactos (logs y binarios)
        uses: actions/upload-artifact@v4
        with:
          name: resultados-ci
          path: |
            tests/results.txt
            prog
            prog.o

      - name: Calcular puntaje simple (60/40)
        id: score
        run: |
          # Puntaje sencillo: si pasan tests => 60 pts; compila => +40 pts
          PASS_TESTS=0
          if [ "${{ steps.tests.outputs.exitcode }}" = "0" ]; then
            PASS_TESTS=1
          fi
          PASS_BUILD=0
          if [ -f prog ]; then
            PASS_BUILD=1
          fi

          SCORE=0
          if [ "$PASS_BUILD" = "1" ]; then SCORE=$((SCORE+40)); fi
          if [ "$PASS_TESTS" = "1" ]; then SCORE=$((SCORE+60)); fi

          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "Puntaje: $SCORE/100" >> $GITHUB_STEP_SUMMARY
          echo '### Resumen Autograding' >> $GITHUB_STEP_SUMMARY
          echo "- Compilación: $([ $PASS_BUILD = 1 ] && echo ✅ || echo ❌)" >> $GITHUB_STEP_SUMMARY
          echo "- Pruebas: $([ $PASS_TESTS = 1 ] && echo ✅ || echo ❌)" >> $GITHUB_STEP_SUMMARY

      - name: Comentar en el PR (si aplica)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('tests/results.txt', 'utf8');
            const score = `${{ steps.score.outputs.score }}`;
            const body = [
              '## 🧪 Autograding ARM64 (QEMU)',
              '',
              `**Puntaje:** ${score}/100`,
              '',
              '### Resultados de pruebas',
              '```',
              results,
              '```',
              '### Nota',
              '- La calificación final puede considerar rúbrica detallada (RUBRICA.md).',
            ].join('\n');

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
